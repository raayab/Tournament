{"version":3,"sources":["Components/Pagination.js","Components/SearchInput.js","Components/PlayerRow.js","Hooks/useSuspects.js","Components/FilteredColumn.js","Components/TournamentTableResults.js","Hooks/useTournamentResults.js","Components/TournamentAppTitle.js","Components/Tournament.js","App.js","serviceWorker.js","index.js"],"names":["Pagination","props","maxPages","Math","ceil","total","playersPerPage","className","pages","start","pageNumber","end","push","key","onClick","onPageNumberChange","i","classes","changePage","SearchInput","type","placeholder","value","freeSearchfilter","onChange","e","onFreeFilterChange","target","PlayerRow","isSuspect","id","name","charAt","toUpperCase","substring","level","score","SUSPECTS_URL","useSuspects","useState","suspects","setSuspects","useEffect","fetch","then","res","json","catch","console","log","FilteredColumn","columnName","setColumnName","filters","allFilters","map","filter","onLevelFilterChange","changeFilter","distinctValuesForLevel","TournamentTableResults","players","playersList","player","includes","getDistinctValuesForLevel","col","getDistinctValuesForColumn","PLAYERS_URL","useTournamentResults","levelFilter","setTotal","setPlayers","headers","get","TOURNAMENT_APP_TITLE","TournamentAppTitle","Tournament","setLevelFilter","setFreeSearchfilter","setPageNumber","page","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OA6CeA,MA1Cf,SAAoBC,GAChB,IAAOC,EAAWC,KAAKC,KAAKH,EAAMI,MAAQJ,EAAMK,gBAmChD,OACI,yBAAKC,UAAU,cAlCF,WACb,IAAIC,EAAQ,GACRC,EAAUR,EAAMS,WAAa,EAAK,EAAK,EAAKT,EAAMS,WAAa,EAC/DC,EAASV,EAAMS,WAAa,EAAKR,EAAYA,EAAYD,EAAMS,WAAa,EAE5ET,EAAMS,WAAa,GACnBF,EAAMI,KAAK,4BAAQC,IAAI,OAAOC,QAAS,kBAAIb,EAAMc,mBAAmBd,EAAMS,WAAa,KAA5E,SAEXD,EAAQ,GACRD,EAAMI,KAAK,4BAAQC,IAAI,IAAIC,QAAS,kBAAIb,EAAMc,mBAAmB,KAAtD,MAEXN,EAAQ,GACRD,EAAMI,KAAK,4BAAQC,IAAI,QAAZ,QAGf,IAfkB,eAeTG,GACL,IAAIC,EAAUD,IAAIf,EAAMS,WAAW,SAAW,GAC9CF,EAAMI,KAAK,4BAAQC,IAAKG,EAAGF,QAAS,kBAAIb,EAAMc,mBAAmBC,IAAIT,UAAWU,GAAUD,KAFrFA,EAAIP,EAAOO,GAAKL,EAAKK,IAAM,EAA3BA,GAeT,OAVIL,EAAMT,EAAW,GACjBM,EAAMI,KAAK,4BAAQC,IAAI,QAAZ,QAEXF,EAAMT,GACNM,EAAMI,KAAK,4BAAQC,IAAKX,EAAUY,QAAS,kBAAIb,EAAMc,mBAAmBb,KAAYA,IAEpFD,EAAMS,WAAaR,GACnBM,EAAMI,KAAK,4BAAQC,IAAI,QAAQC,QAAS,kBAAIb,EAAMc,mBAAmBd,EAAMS,WAAa,KAA7E,SAGRF,EAKFU,KChCEC,MAPf,SAAqBlB,GACjB,OACI,2BAAOM,UAAU,eACTa,KAAK,OAAOC,YAAY,YAAYC,MAAOrB,EAAMsB,iBACjDC,SAAU,SAACC,GAAD,OAAKxB,EAAMyB,mBAAmBD,EAAEE,OAAOL,WCQlDM,MAXf,SAAmB3B,GACf,OACI,wBAAIM,UAAW,aAAeN,EAAM4B,WAChC,wBAAItB,UAAU,QAAQN,EAAM6B,IAC5B,wBAAIvB,UAAU,QAAQN,EAAM8B,KAAKC,OAAO,GAAGC,cAAgBhC,EAAM8B,KAAKG,UAAU,IAChF,wBAAI3B,UAAU,QAAQN,EAAMkC,OAC5B,wBAAI5B,UAAU,QAAQN,EAAMmC,SCRlCC,EAAe,iDAeNC,MAbf,WAAwB,IAAD,EACaC,mBAAS,IADtB,mBACZC,EADY,KACFC,EADE,KAUnB,OAPAC,qBAAU,WACNC,MAAMN,GACLO,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAC,GAAG,OAAEJ,EAAYI,MACtBE,OAAM,SAAAtB,GAAC,OAAEuB,QAAQC,IAAI,4BACxB,IAEKT,GCeIU,MAzBf,SAAwBjD,GAAQ,IAAD,EAEQsC,mBAAStC,EAAMkD,YAFvB,mBAEpBA,EAFoB,KAETC,EAFS,KAOrBC,EAAWpD,EAAMqD,WAAWC,KAAI,SAAAC,GAAM,OACpC,4BAAQ3C,IAAK2C,EAAQ1C,QAAS,kBALjB,SAAC0C,GAClBJ,EAAcI,GACdvD,EAAMwD,oBAAoBD,GAGYE,CAAaF,KAAUA,MAGjE,OACI,yBAAKjD,UAAU,YACX,yBAAKA,UAAU,YACI,UAAb4C,EAAsB,aAAe,UAAYA,GAAc,IACjE,uBAAG5C,UAAU,UAEjB,yBAAKA,UAAU,oBACX,yBAAKA,UAAU,aACV8C,MChBfM,EAAyB,CAAC,MAAM,SAAS,MAAM,WAiDtCC,MA/Cf,SAAgC3D,GAC5B,IAAMuC,EAAWF,IACbuB,EAAU5D,EAAM6D,YAAYP,KAAI,SAAAQ,GAAM,OAAG,kBAAC,EAAD,CAAWlD,IAAOkD,EAAOjC,GAClEA,GAAMiC,EAAOjC,GACbC,KAAQgC,EAAOhC,KACfI,MAAS4B,EAAO5B,MAChBC,MAAS2B,EAAO3B,MAChBP,UAAaW,EAASwB,SAASD,EAAOjC,IAAI,UAAU,QAQlDmC,EAA4B,WAC9B,OAAON,GASX,OACI,yBAAKpD,UAAU,mBACX,2BAAOA,UAAU,cACjB,+BACI,4BACI,kCACA,oCACA,4BAAI,kBAAC,EAAD,CAAgB4C,WAAW,QACXG,WAvBD,SAACY,GAChC,GAAY,UAARA,EACA,OAAOD,IAqBmCE,CAA2B,SACzCV,oBAfR,SAACD,GAChB,QAATA,EACAvD,EAAMwD,oBAAoB,IACxBxD,EAAMwD,oBAAoBD,MAUhB,KAIA,uCAGR,+BACKK,MC7CXO,EAAW,yCAiBFC,MAff,SAA8BC,EAAY/C,EAAiBb,EAAWJ,GAAiB,IAAD,EACzDiC,mBAAS,GADgD,mBAC3ElC,EAD2E,KACrEkE,EADqE,OAEpDhC,mBAAS,IAF2C,mBAE3EsB,EAF2E,KAElEW,EAFkE,KAYlF,OATA9B,qBAAU,WAGNC,MAAMyB,EAAY,SAAD,OAFQ,IAAb1D,EAAiB,GAAKA,EAAW,GAAKJ,EAEjC,cAAqBA,EAArB,kBAA6CgE,EAA7C,mBAAmE/C,IACnFqB,MAAK,SAAAC,GAA+C,OAAtC0B,EAAS1B,EAAI4B,QAAQC,IAAI,YAAoB7B,EAAIC,UAC/DF,MAAK,SAAAC,GAAG,OAAE2B,EAAW3B,MACrBE,OAAM,SAAAtB,GAAC,OAAEuB,QAAQC,IAAI,2BACxB,CAACqB,EAAY/C,EAAiBb,EAAWJ,IAEpC,CAACuD,UAASxD,UCffsE,EAAuB,iCASdC,MAPf,WACI,OACI,yBAAKrE,UAAU,SACVoE,ICmCEE,MAlCf,WAAuB,IAAD,EACmBtC,mBAAS,IAD5B,mBACX+B,EADW,KACCQ,EADD,OAE6BvC,mBAAS,IAFtC,mBAEXhB,EAFW,KAEMwD,EAFN,OAGiBxC,mBAAS,GAH1B,mBAGX7B,EAHW,KAGAsE,EAHA,OAKSX,EAAqBC,EAAY/C,EAAiBb,EADtD,IACfmD,EALU,EAKVA,QAASxD,EALC,EAKDA,MAcjB,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAakB,iBAAkBA,EACnBG,mBAZO,SAAC8B,GACxBuB,EAAoBvB,GACpBwB,EAAc,MAWV,kBAAC,EAAD,CAAwBlB,YAAcD,EACdJ,oBAlBJ,SAACD,GACzBsB,EAAetB,GACfwB,EAAc,MAiBV,kBAAC,EAAD,CAAYtE,WAAYA,EACZK,mBAZO,SAACkE,GACxBD,EAAcC,IAYE5E,MAASA,EACTC,eAzBG,O,MCDZ4E,MANf,WACE,OACE,kBAAC,EAAD,OCKgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,kB","file":"static/js/main.79019f19.chunk.js","sourcesContent":["\r\nimport React from 'react'; \r\n\r\nfunction Pagination(props) { \r\n    const  maxPages = Math.ceil(props.total / props.playersPerPage);\r\n\r\n    const changePage=() =>{\r\n        let pages = [];\r\n        let start = ((props.pageNumber - 2) < 1) ? 1 : (props.pageNumber - 2);\r\n        let end =  ((props.pageNumber + 2) > maxPages) ? maxPages : (props.pageNumber + 2);\r\n\r\n        if (props.pageNumber > 1) {\r\n            pages.push(<button key=\"left\" onClick={()=>props.onPageNumberChange(props.pageNumber - 1)}>&laquo;</button>);\r\n        }\r\n        if (start > 1) {\r\n            pages.push(<button key=\"1\" onClick={()=>props.onPageNumberChange(1)}>1</button>);\r\n        }\r\n        if (start > 2) {\r\n            pages.push(<button key=\"dot1\">...</button>);\r\n        }\r\n\r\n        for (let i = start; i <= end; i++) {\r\n            let classes = i===props.pageNumber?'active' : ''; \r\n            pages.push(<button key={i} onClick={()=>props.onPageNumberChange(i)} className={classes}>{i}</button>);\r\n        }\r\n\r\n        if (end < maxPages - 1) {\r\n            pages.push(<button key=\"dot2\">...</button>);\r\n        }\r\n        if (end < maxPages) {\r\n            pages.push(<button key={maxPages} onClick={()=>props.onPageNumberChange(maxPages)}>{maxPages}</button>);\r\n        }\r\n        if (props.pageNumber < maxPages) {\r\n            pages.push(<button key=\"right\" onClick={()=>props.onPageNumberChange(props.pageNumber + 1)}>&raquo;</button>);\r\n        }\r\n\r\n        return pages;\r\n    };\r\n\r\n    return (\r\n        <div className=\"pagination\">\r\n            {changePage()}\r\n        </div>\r\n    );\r\n}\r\nexport default Pagination;","import React from 'react';\r\n\r\nfunction SearchInput(props) {\r\n    return (\r\n        <input className=\"search_input\"\r\n                type=\"text\" placeholder=\"Search...\" value={props.freeSearchfilter} \r\n                onChange={(e)=>props.onFreeFilterChange(e.target.value)}>\r\n        </input>);\r\n}\r\nexport default SearchInput;","\r\nimport React from 'react';\r\n\r\nfunction PlayerRow(props) {\r\n    return (\r\n        <tr className={\"table_row \" + props.isSuspect}>\r\n            <td className=\"item\">{props.id}</td>\r\n            <td className=\"item\">{props.name.charAt(0).toUpperCase() + props.name.substring(1)}</td>\r\n            <td className=\"item\">{props.level}</td>\r\n            <td className=\"item\">{props.score}</td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default PlayerRow;","import {useEffect, useState } from 'react';\r\nconst SUSPECTS_URL = 'http://localhost:20000/api/v1/players/suspects';\r\n\r\nfunction useSuspects() {\r\n    const [suspects, setSuspects] = useState([]);\r\n\r\n    useEffect(() => {\r\n        fetch(SUSPECTS_URL)\r\n        .then(res=>res.json())\r\n        .then(res=>setSuspects(res))\r\n        .catch(e=>console.log(\"Get suspects failed\"));\r\n    },[]);\r\n\r\n    return suspects;\r\n}\r\n\r\nexport default useSuspects;\r\n\r\n    \r\n","\r\nimport React, { useState } from 'react';\r\n\r\nfunction FilteredColumn(props) {\r\n\r\n    const [columnName,setColumnName] = useState(props.columnName);\r\n    const changeFilter = (filter)=> {\r\n        setColumnName(filter);\r\n        props.onLevelFilterChange(filter);\r\n    };\r\n    const filters =  props.allFilters.map(filter=>\r\n            <button key={filter} onClick={()=>changeFilter(filter)}>{filter}</button>\r\n            );\r\n\r\n    return (\r\n        <div className=\"dropdown\">\r\n            <div className=\"dropbtn\">\r\n                {(columnName===\"level\"? \"Level: all\" : \"Level: \" + columnName) + \" \"}\r\n                <i className=\"down\"></i>\r\n            </div>\r\n            <div className=\"dropdown-content\">\r\n                <div className=\"container\">\r\n                    {filters}\r\n                </div>\r\n            </div>\r\n        </div> \r\n    )\r\n}\r\nexport default FilteredColumn;","\r\nimport React from 'react'\r\nimport PlayerRow from './PlayerRow';\r\nimport useSuspects from '../Hooks/useSuspects';\r\nimport FilteredColumn from './FilteredColumn';\r\n\r\nconst distinctValuesForLevel = [\"all\",\"rookie\",\"pro\",\"amateur\"];\r\n\r\nfunction TournamentTableResults(props) {\r\n    const suspects = useSuspects();\r\n    let players = props.playersList.map(player=>(<PlayerRow key = {player.id}\r\n        id = {player.id}\r\n        name = {player.name}\r\n        level = {player.level}\r\n        score = {player.score}\r\n        isSuspect = {suspects.includes(player.id)?\"suspect\":\"\"}\r\n        />));\r\n\r\n    const getDistinctValuesForColumn = (col) => {\r\n        if (col === \"level\")\r\n            return getDistinctValuesForLevel();\r\n    };\r\n\r\n    const getDistinctValuesForLevel = () => {\r\n        return distinctValuesForLevel;\r\n    };\r\n    \r\n    const onLevelFilterChange = (filter) => {\r\n        filter===\"all\" ?\r\n        props.onLevelFilterChange('')\r\n        : props.onLevelFilterChange(filter);\r\n    };\r\n\r\n    return (\r\n        <div className=\"table_container\">\r\n            <table className=\"users_list\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Id</th>\r\n                    <th>Name</th> \r\n                    <th><FilteredColumn columnName=\"level\" \r\n                                        allFilters = {getDistinctValuesForColumn(\"level\")}\r\n                                        onLevelFilterChange = {onLevelFilterChange}\r\n                                        /> </th> \r\n                    <th>Score</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {players}\r\n            </tbody>\r\n            </table>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TournamentTableResults;","\r\nimport {useEffect, useState } from 'react';\r\n\r\nconst PLAYERS_URL = `http://localhost:20000/api/v1/players?`;\r\n\r\nfunction useTournamentResults(levelFilter,freeSearchfilter,pageNumber,playersPerPage) {\r\n    const [total,setTotal] = useState(1);\r\n    const [players, setPlayers] = useState([]);\r\n    useEffect(() => {\r\n        let start = pageNumber===1 ? 0 : (pageNumber-1) * playersPerPage;\r\n\r\n        fetch(PLAYERS_URL+`start=${start}&n=${playersPerPage}&level=${levelFilter}&search=${freeSearchfilter}`)\r\n        .then(res => { setTotal(res.headers.get('x-total')); return res.json()})\r\n        .then(res=>setPlayers(res))\r\n        .catch(e=>console.log(\"Get players failed\"));\r\n    },[levelFilter,freeSearchfilter,pageNumber,playersPerPage] );\r\n\r\n    return {players, total};\r\n}\r\n\r\nexport default useTournamentResults;","import React from 'react';\r\n\r\nconst TOURNAMENT_APP_TITLE = \"Tournament 101 - Final Results\";\r\n\r\nfunction TournamentAppTitle() {\r\n    return (\r\n        <div className=\"title\">\r\n            {TOURNAMENT_APP_TITLE}\r\n        </div>\r\n    );\r\n}\r\nexport default TournamentAppTitle;","\r\nimport React, { useState } from 'react';\r\nimport Pagination from './Pagination';\r\nimport SearchInput from './SearchInput';\r\nimport TournamentTableResults from './TournamentTableResults';\r\nimport useTournamentResults from '../Hooks/useTournamentResults';\r\nimport TournamentAppTitle from './TournamentAppTitle';\r\n\r\nfunction Tournament() {\r\n    const [levelFilter,setLevelFilter] = useState('');\r\n    const [freeSearchfilter,setFreeSearchfilter] = useState('');\r\n    const [pageNumber,setPageNumber] = useState(1);\r\n    const playersPerPage = 10;\r\n    const { players, total } = useTournamentResults(levelFilter,freeSearchfilter,pageNumber,playersPerPage);\r\n\r\n    const onLevelFilterChange = (filter) => {\r\n        setLevelFilter(filter);\r\n        setPageNumber(1);\r\n    };\r\n    const onFreeFilterChange = (filter) => {\r\n        setFreeSearchfilter(filter);\r\n        setPageNumber(1);\r\n    };\r\n    const onPageNumberChange = (page) => {\r\n        setPageNumber(page);\r\n    };\r\n      \r\n    return (\r\n        <div>\r\n            <TournamentAppTitle />\r\n            <SearchInput freeSearchfilter={freeSearchfilter}\r\n                        onFreeFilterChange = {onFreeFilterChange}/>\r\n            <TournamentTableResults playersList= {players}\r\n                                    onLevelFilterChange = {onLevelFilterChange}/>\r\n            <Pagination pageNumber={pageNumber}\r\n                        onPageNumberChange={onPageNumberChange}\r\n                        total = {total}\r\n                        playersPerPage = {playersPerPage}\r\n                        />\r\n        </div>\r\n    );\r\n}\r\nexport default Tournament;","\nimport React from 'react';\nimport Tournament from './Components/Tournament';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Tournament />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}